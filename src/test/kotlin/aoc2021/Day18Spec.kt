package aoc2021

import aoc2021.Sno.Companion.explode
import aoc2021.Sno.Companion.findPairAtDepth
import aoc2021.Sno.Companion.parse
import aoc2021.Sno.Companion.reduce
import aoc2021.Sno.Companion.split
import io.kotest.core.spec.style.FunSpec
import io.kotest.data.forAll
import io.kotest.data.headers
import io.kotest.data.row
import io.kotest.data.table
import io.kotest.matchers.shouldBe

class Day18Spec : FunSpec({

    test("parsing") {
        table(
            headers("input", "results"),
            row("[1,2]", SnoPair(SnoNum(1), SnoNum(2))),
            row("[[1,2],3]", SnoPair(SnoPair(SnoNum(1), SnoNum(2)), SnoNum(3))),
            row("[9,[8,7]]", SnoPair(SnoNum(9), SnoPair(SnoNum(8), SnoNum(7)))),
            row("[[1,9],[8,5]]", SnoPair(SnoPair(SnoNum(1), SnoNum(9)), SnoPair(SnoNum(8), SnoNum(5)))),
        ).forAll { input, result ->
            parse(input).first.shouldBe(result)
        }
    }

    test("as extension") {
        "[[1,9],[8,5]]".toSno().shouldBe(SnoPair(SnoPair(SnoNum(1), SnoNum(9)), SnoPair(SnoNum(8), SnoNum(5))))
    }

    test("add without reduction") {
        ("[1,2]".toSno() + "[[3,4],5]".toSno()).shouldBe("[[1,2],[[3,4],5]]".toSno())
    }

    test("find pair at depth") {
        table(
            headers("input", "result"),
            row("[[1,2],[[3,4],5]]", -1),
            row("[[[[[9,8],1],2],3],4]", 4),
        ).forAll { input, result->
            findPairAtDepth(input, 5).shouldBe(result)
        }
    }

    test("explode") {
        explode("[[[[[9,8],1],2],3],4]").shouldBe("[[[[0,9],2],3],4]")
        explode("[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]").shouldBe("[[3,[2,[8,0]]],[9,[5,[7,0]]]]")
    }

    test("split") {
        split("[[[[0,7],4],[15,[0,13]]],[1,1]]").shouldBe("[[[[0,7],4],[[7,8],[0,13]]],[1,1]]")
    }

    test("reduce") {
        reduce("[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]").shouldBe("[[[[0,7],4],[[7,8],[6,0]]],[8,1]]")
    }

    test("string add") {
        table(
            headers("a", "b", "result"),
            row("[[[[4,3],4],4],[7,[[8,4],9]]]", "[1,1]", "[[[[0,7],4],[[7,8],[6,0]]],[8,1]]"),
            row("[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]", "[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]", "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]"),
            row("[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]", "[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]", "[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]"),
            row("[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]", "[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]", "[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]"),
            row("[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]", "[7,[5,[[3,8],[1,4]]]]", "[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]"),
            row("[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]", "[[2,[2,2]],[8,[8,1]]]", "[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]"),
            row("[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]", "[2,9]", "[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]"),
        ).forAll { a, b, result -> Sno.add(a, b).shouldBe(result) }
    }

    test("multi-line addition") {
        Sno.addMulti("""
            [[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
            [7,[[[3,7],[4,3]],[[6,3],[8,8]]]]
            [[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]
            [[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]
            [7,[5,[[3,8],[1,4]]]]
            [[2,[2,2]],[8,[8,1]]]
            [2,9]
            [1,[[[9,3],9],[[9,0],[0,7]]]]
            [[[5,[7,4]],7],1]
            [[[[4,2],2],6],[8,7]]
        """.trimIndent().lines()).shouldBe("[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]")
    }

    test("magnitude") {
        parse("[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]").first.magnitude().shouldBe(3488)
    }

    test("part 1") {
        Sno.part1("""
            [[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
            [[[5,[2,8]],4],[5,[[9,9],0]]]
            [6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
            [[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
            [[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
            [[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
            [[[[5,4],[7,7]],8],[[8,3],8]]
            [[9,3],[[9,9],[6,[4,9]]]]
            [[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
            [[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]
        """.trimIndent().lines()).shouldBe(4140)
    }

    test("part 2") {
        Sno.part2("""
            [[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
            [[[5,[2,8]],4],[5,[[9,9],0]]]
            [6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
            [[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
            [[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
            [[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
            [[[[5,4],[7,7]],8],[[8,3],8]]
            [[9,3],[[9,9],[6,[4,9]]]]
            [[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
            [[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]
        """.trimIndent().lines()).shouldBe(3993)
    }
})